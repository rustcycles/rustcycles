name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # Runs at 15:00 UTC on Fri
    - cron: "0 15 * * 5"
  workflow_dispatch:
    # This allows running it on any branch manually:
    # https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow

env:
  CARGO_TERM_COLOR: always
  # Deny warns here as a catch-all and because some commands (e.g. cargo build) don't accept `--deny warnings`
  # but also deny them on all individual cargo invocations where applicable because:
  # 1) Some commands might not support rustflags (e.g. clippy didn't at first, cargo doc uses a different var, ...)
  # 2) People (or me) might copy paste the commands into CI where this flag is missing without noticing.
  RUSTFLAGS: --deny warnings

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, nightly]
        # For reference: https://github.com/actions/virtual-environments#available-environments
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Install linux deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update # Run update first or install might start failing eventually.
          # Fyrox deps
          sudo apt-get install --no-install-recommends -y libasound2-dev libudev-dev pkg-config xorg-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libgl1-mesa-glx
          # Add OpenGL libs to the CI runner because Fyrox currently has no headless mode
          sudo apt-get install --no-install-recommends -y libegl1-mesa libegl1
      - run: rustc --version && cargo --version
      # Use build instead of check since it needs to be built for tests anyway
      - run: cargo build --verbose --all-features
      - run: cargo test --verbose --all-features
      - name: Run the client (headless)
        # LATER Look for ways to run the client on all OSes
        #       Maybe try this on windows: https://amiralizadeh9480.medium.com/how-to-run-opengl-based-tests-on-github-actions-60f270b1ea2c
        # LATER When fyrox has a headless mode, run the server on all OSes
        #       https://github.com/FyroxEngine/Fyrox/issues/222
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: RUST_BACKTRACE=1 xvfb-run cargo run --verbose --all-features -- local d_exit_after_one_frame true cl_headless true

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cargo fmt --version
      - run: cargo fmt -- --check

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install linux deps
        run: |
          sudo apt-get update # Run update first or install might start failing eventually
          sudo apt-get install --no-install-recommends -y libasound2-dev libudev-dev pkg-config xorg-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
      - uses: actions/checkout@v3
      - run: cargo clippy --version
        # Use --all-targets to also check tests.
        # Note that --all-features doesn't check all code when something is *disabled* by a feature.
      - run: cargo clippy --all-targets --all-features -- --deny warnings
        # No fixmes allowed - they're to be fixed before committing
        # or at least before merging to master so they can be used
        # during development for things that must not be forgotten
        # and grep's output is not littered with other people's fixmes.
        #
        # Grep returns success when found and failure when not found, `!` inverts success/failure.
        # The `[F]` is the usual trick to avoid matching this line itself
        # while still matching other potential uses in this file.
      - run: "! ( grep --recursive --exclude-dir=target [F]IXME . && echo 'The lines above this message must be fixed (or marked as todo/later in uppercase, not fixme)' )"
        # Similar as above - cvars like d_dbg* should not be committed to master
        # so they're available to be used by other devs.
      - run: '! ( grep --recursive --exclude-dir=target --exclude=debug.rs cvars\.d_dbg . && echo "The d_dbg* cvars should not be used in committed code. Maybe you forgot to remove debug code?" )'
